// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */

CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS:
    Or(a=load, b=inc, out=or1);
    Or(a=or1, b=reset, out=orload); // Should load?
    Add16(a=insideout, b[0]=true, out=incout);
    Not(in=reset, out=notreset);
    And(a=notreset, b=load, out=fload);
    Not(in=fload, out=notfload);
    And(a=notfload, b=inc, out=minc);
    And(a=notreset, b=minc, out=finc);
    Mux16(a=in, sel=reset, out=out1); // Since b is not defined, if sel = 1, Mux returns an array of 0s
    Mux16(a=out1, b=in, sel=fload, out=out2);
    Mux16(a=out2, b=incout, sel=finc, out=out3);
    Register(in=out3, load=orload, out=insideout, out=out);
    // Put your code here:
}
